.l-main-section

  h2#section-route-use Using the Component Router
  p.
    [PENDING: explain what a router is.]

  p There are three steps to setting up routing with Angular's Component Router:
  ol
    li Install the Component Router
    li Map paths to components
    li Link to routes

  p.
    The code in this page assumes that you have a Dart web app
    with the following <code>pubspec.yaml</code> and
    <code>web/index.html</code> files.

  .code-box
    pre.prettyprint.lang-yaml(data-name="yaml")
      code.
        # pubspec.yaml
        name: router_demo
        description: Dart version of Angular 2 example, Using the Component Router
        version: 0.0.1
        dependencies:
          angular2: 2.0.0-alpha.22
          browser: any
    pre.prettyprint.lang-html(data-name="html")
      code.
        &lt;!-- web/index.html --&gt;
        &lt;!DOCTYPE html&gt;
        &lt;html&gt;
          &lt;body&gt;
            &lt;my-app&gt;&lt;/my-app&gt;
            &lt;script type=&quot;application/dart&quot; src=&quot;main.dart&quot;&gt;&lt;/script&gt;
            &lt;script src=&quot;packages/browser/dart.js&quot;&gt;&lt;/script&gt;
          &lt;/body&gt;
        &lt;/html&gt;


.l-main-section

  h2#section-install-router Install the Component Router

  p.
    To install the router, put the following code in <code>web/main.dart</code>:

  //- TODO: inlined HTML is broken; see: https://github.com/angular/angular.io/issues/64
  pre.prettyprint.linenums.lang-dart
    code.
      import 'package:angular2/angular2.dart';
      <span class="pnk">import 'package:angular2/router.dart';</span>

      import 'package:angular2/src/reflection/reflection.dart' show reflector;
      import 'package:angular2/src/reflection/reflection_capabilities.dart' show ReflectionCapabilities;

      @Component(
        selector: 'my-app'
      )
      @View(
        template: 'Router outlet goes here: <span class="pnk">&lt;router-outlet>&lt;/router-outlet></span>',
        directives: const [<span class="pnk">RouterOutlet</span>]
      )
      <span class="pnk">@RouteConfig(const [])</span>
      class AppComp {}

      main() {
        reflector.reflectionCapabilities = new ReflectionCapabilities();
        bootstrap(AppComp, <span class="pnk">routeInjectables</span>);
      }

  p.
    The highlighted code imports configures the router.
    The RouterOutlet directive allows you to use the
    <code>&lt;router-outlet></code> tag,
    which is a placeholder for the part of your app
    that's loaded dynamically, based on the route configuration.
    The <code>routeInjectables</code> argument to <code>bootstrap()</code>
    ties the router into your app.
    The <code>@RouteConfig()</code> annotation associates paths with components.
    More about that in the next section.


.l-main-section
  h2#section-map-paths-to-components Map paths to components

  p.
    A component's template can have <b>outlets,</b>
    which are holes in the DOM for loading parts of your app based on the
    route configuration and it can ask the DI system for an instance of Router.
    A component's router tells the component what to put
    inside the outlets based on URL.
    The configuration maps routes to components for each outlet.

  p.
    Let's make a <code>&lt;home-cmp></code> component that our app can route to.
    We'll implement it under the <code>lib</code> directory, which by
    <a href="https://www.dartlang.org/tools/pub/package-layout.html">pub
    package layout conventions</a>
    lives next to <code>pubspec.yaml</code> and <code>web</code>.

  pre.prettyprint.lang-bash
    code.
      mkdir -p lib/components/home
      touch lib/components/home/home.dart

  p.
    Put the following content into <code>home.dart</code>:

  //- This should probably be in 2 files, with a templateUrl.
  pre.prettyprint.lang-dart
    code.
      // home.dart
      import 'package:angular2/angular2.dart';

      @Component(
          selector: 'home-cmp'
      )
      @View(
          template: 'Hello {{name}}'
      )
      class HomeComp {
        String name;
        HomeComp() : name = 'Friend' {}
      }

  p.
    Modify <code>web/main.dart</code>,
    importing <code>home.dart</code>
    and associating HomeComp with the root path:

  pre.prettyprint.linenums.lang-dart
    code.
      import 'package:angular2/angular2.dart';
      import 'package:angular2/router.dart';

      import 'package:angular2/src/reflection/reflection.dart' show reflector;
      import 'package:angular2/src/reflection/reflection_capabilities.dart' show ReflectionCapabilities;

      <span class="pnk">import 'package:router_demo/components/home/home.dart';</span>

      @Component(
        selector: 'my-app'
      )
      @View(
        template: 'Router outlet goes here: &lt;router-outlet>&lt;/router-outlet>',
        directives: const [RouterOutlet]
      )
      <span class="pnk">@RouteConfig(const [ const {
        'path': '/',
        'component': HomeComp
      }])</span>
      class AppComp {}

      main() {
        reflector.reflectionCapabilities = new ReflectionCapabilities();
        bootstrap(AppComp, routeInjectables);
      }
  p If you run the app, you should see <b>Hello Friend</b>.

  .callout.is-helpful
    header Troubleshooting
    p.
      If you don't see "Hello Friend" in your app
      and you see no error messages in the console,
      then the router probably didn't recognize the path.
      If you're using WebStorm, try going directly to the pub server's port.
      You can get it from pub server's output
      (<b>View > Tool Windows > Pub Serve</b>).
      Scroll up until you see the message
      "Serving router_demo web on http://localhost:XXXXX",
      and copy that URL into a Dartium window.
      Otherwise, try using Dartium and a simple HTTP server started from
      the <code>web</code> directory.
      [PENDING: check; update if/when we add basePath]


.l-main-section
  h2#section-link-to-routes Link to routes

  p Let's add another route and then link to it. This route will have a route parameter, <code>id</code>.

  p In <code>main.dart</code>:

  pre.prettyprint.linenums.lang-dart
    code.
      @Component(
        selector: 'my-app'
      )
      @RouteConfig(const [
        const { 'path': '/',           'component': HomeComp },
        const { 'path': '/detail/:id', 'component': DetailComp }
      ])
      class AppComp {}

  p We should also implement our detail component.

  pre.prettyprint.lang-bash
    code.
      mkdir lib/components/detail
      touch lib/components/detail/detail.dart

  p.
    In <code>detail.dart</code>,
    implement a controller that uses the <code>id</code> route parameter:

  pre.prettyprint.linenums.lang-dart
    code.
      // detail.dart
      library routing_demo.components.detail.dart;

      import 'package:angular2/angular2.dart';
      import 'package:angular2/router.dart';

      @Component(
          selector: 'detail'
      )
      @View(
          template: 'User ID: {{id}}'
      )
      class DetailComp {
        num id;
        DetailComp(RouteParams routeParams) : id = routeParams.get('id') {}
      }

  p.
    Now import <code>detail.dart</code> into <code>main.dart</code>,
    and add a link to the main component's template
    that uses the <code>router-link</code> directive
    to let you navigate to the new path:

  pre.prettyprint.lang-dart
    code.
      ...
      import 'package:router_demo/components/home/home.dart';
      <span class="pnk">import 'package:router_demo/components/detail/detail.dart';</span>
      ...
      @View(
          template: <span class="pnk">'''</span>
      Router outlet goes here: &lt;router-outlet>&lt;/router-outlet>
      <span class="pnk">&lt;br>
      &lt;a router-link="detail({id: 5})">link to detail&lt;/a>
      '''</span>,
          directives: const [RouterOutlet, RouterLink]
      )

  p.
    [PENDING: This doesn't work yet, due to a bug in router-link]

.l-main-section

  h2#section-configuring-the-router Configuring the Router

  p.
    Unlike other routing systems, Component Router maps URLs to components. A router takes an array of pairings like
    this:

  pre.prettyprint.linenums.lang-javascript(data-name="typescript")
    code.
      @Component(...)
      @View(...)
      @RouteConfig(const [
        const { 'path': '/user', 'component': 'user' }
      ])
      class MyComp {}




  .l-sub-section
    h3#section-sibling-outlets Sibling Outlets

    p You can configure multiple outlets on the same path like this:

    pre.prettyprint.linenums.lang-dart
      code.
        @Component(...)
        @View(
          template:
            `&lt;div router-outlet="master"&gt;&lt;/div&gt;
             &lt;div router-outlet="detail"&gt;&lt;/div&gt;`,
          directives: const [RouterOutlet]
        )
        @RouteConfig(const [ const {
          'path': '/user', 'components': const {
            'master': UserListComp,
            'detail': UserComp
          }
        }])
        class MyComponent {}



    p You can link to any sibling just as you normally would:

    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;p&gt;These both link to the same view:&lt;/p&gt;
        &lt;a router-link=&quot;userList&quot;&gt;link to userList&lt;/a&gt;
        &lt;a router-link=&quot;user&quot;&gt;link to user component&lt;/a&gt;


    p Or, you can explicitly link to a outlet-component pair like this:

    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;p&gt;These both link to the same view:&lt;/p&gt;
        &lt;a router-link=&quot;master:userList&quot;&gt;link to userList&lt;/a&gt;
        &lt;a router-link=&quot;detail:user&quot;&gt;link to user component&lt;/a&gt;

  .l-sub-section
    h3#section-redirecting-routes Redirecting routes

    p You can use `redirectTo` for migrating to a new URL scheme and setting up default routes.

    p.
      For example, as specified below, when a user navigates to `/`, the URL changes to `/user` and the outlet
      at that level loads the `user` component.

    pre.prettyprint.linenums.lang-dart
      code.
        @Component(...)
        @View(
          directives: const [RouterOutlet]
        )
        @RouteConfig(const [
          const { 'path': '/', 'redirectTo': '/user' },
          const { 'path': '/user', 'component': UserComp }
        ])
        class MyComp {}


  .l-sub-section
    h3#section-aliases Aliases

    p.
      When linking to a route, you normally use the name of the component. You can also specify an alias to use
      instead.

    p Consider the following route configuration:

    pre.prettyprint.linenums.lang-dart
      code.
        @Component(...)
        @View(
          directives: const [RouterOutlet]
        )
        @RouteConfig(const [
          const { 'path': '/', 'component': 'user' }
        ])
        class MyComp {}


    p We can link to the route in our template with the name of the component:

    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;a router-link=&quot;user&quot;&gt;link to user component&lt;/a&gt;

    p Or, we can define an alias <code>myUser</code> like this:

    pre.prettyprint.linenums.lang-dart
      code.
        @Component(...)
        @View(...)
        @RouteConfig(const [
          const { 'path': '/', 'component': UserComp, 'as': 'myUser' }
        ])
        class MyComp {}


    p And refer instead to the alias for the component in our template, with the same end-result:

    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;a router-link=&quot;myUser&quot;&gt;link to user component&lt;/a&gt;

    p.
      This is especially useful when you have sibling components, but want to refer to an entire level of routing in
      your controller. For example:

    pre.prettyprint.linenums.lang-dart
      code.
        @RouteConfig(const [
          const { 'path': '/', 'components':
              const { 'master': UserListComp, 'detail': UserComp },
          'as': 'myUser' }
        ])


  //- TODO(btford): expand on this.
  .l-sub-section
    h3#dynamic-configuration Dynamic Configuration

    p.
      You can configure dynamic routing by asking the DI system for a <code>Router</code>.
