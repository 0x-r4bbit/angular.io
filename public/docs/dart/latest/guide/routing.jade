.l-main-section

  h2#section-route-use Using the Component Router
  p There are three steps to setting up routing with Angular's Component Router:
  ol
    li Install the Component Router
    li Map paths to components
    li Link to routes

  p.
    The code in this page assumes that you have a Dart web app
    with the following <code>pubspec.yaml</code> and
    <code>web/index.html</code> files.

  .code-box
    pre.prettyprint.lang-yaml(data-name="yaml")
      code.
        # pubspec.yaml
        name: router_demo
        description: Dart version of Angular 2 example, Install the Component Router
        version: 0.0.1
        dependencies:
          angular2: 2.0.0-alpha.21
          browser: any
    pre.prettyprint.lang-html(data-name="html")
      code.
        &lt;!-- web/index.html --&gt;
        &lt;!DOCTYPE html&gt;
        &lt;html&gt;
          &lt;body&gt;
            &lt;my-app&gt;&lt;/my-app&gt;
            &lt;script type=&quot;application/dart&quot; src=&quot;main.dart&quot;&gt;&lt;/script&gt;
            &lt;script src=&quot;packages/browser/dart.js&quot;&gt;&lt;/script&gt;
          &lt;/body&gt;
        &lt;/html&gt;


.l-main-section

  h2#section-install-router Install the Component Router

  p.
    To install the router, put the following code in <code>web/main.dart</code>:

  //- TODO: inlined HTML is broken; see: https://github.com/angular/angular.io/issues/64
  pre.prettyprint.linenums.lang-dart
    code.
      import 'package:angular2/angular2.dart';
      <span class="pnk">import 'package:angular2/router.dart';</span>
      import 'package:angular2/di.dart';

      import 'package:router_demo/components/home/home.dart';

      import 'package:angular2/src/reflection/reflection.dart' show reflector;
      import 'package:angular2/src/reflection/reflection_capabilities.dart' show ReflectionCapabilities;

      @Component(
        selector: 'my-app'
      )
      @View(
        template: 'Router outlet goes here: <span class="pnk">&lt;router-outlet>&lt;/router-outlet></span>',
        directives: const [<span class="pnk">RouterOutlet</span>]
      )
      @RouteConfig(const [ const {
        'path': '/',
        'component': HomeComp
      }])
      class AppComp {}

      main() {
        reflector.reflectionCapabilities = new ReflectionCapabilities();
        bootstrap(AppComp, routeInjectables);
      }

  p.
    The highlighted code imports configures the router.
    The RouterOutlet directive allows you to use the
    <code>&lt;router-outlet></code> tag,
    which is a placeholder for the part of your app
    that's loaded dynamically, based on the route configuration.
    The call to <code>bind()</code> ties the router
    into your app.
    [PENDING: um... how? be more specific.].

  p.
    Although you've tied in the router,
    you haven't associated any paths with components.
    To do that, you use a <code>@RouteConfig()</code> annotation.


.l-main-section
  h2#section-map-paths-to-components Map paths to components

  p.
    A component's template can have <b>outlets,</b>
    which are holes in the DOM for loading parts of your app based on the
    route configuration and it can ask the DI system for an instance of Router.
    A component's router tells the component what to put
    inside the outlets based on URL.
    The configuration maps routes to components for each outlet.

  p.
    Let's make a <code>&lt;home></code> component that our app can route to.
    We'll implement it under the <code>lib</code> directory, which by
    <a href="https://www.dartlang.org/tools/pub/package-layout.html">pub
    package layout conventions</a>,
    lives next to <code>pubspec.yaml</code> and <code>web</code>.

  pre.prettyprint.lang-bash
    code.
      mkdir -p lib/components/home
      touch lib/components/home/home.html lib/components/home/home.dart

  p This creates our component directory and its corresponding files:
    a template and a Dart component.

  p Open <code>home.html</code> and add some content:

  pre.prettyprint.lang-html
    code.
      &lt;h1&gt;Hello {{home.name}}!&lt;/h1&gt;

  p Now edit <code>home.dart</code> to add a component controller class:

  pre.prettyprint.linenums.lang-dart
    code.
      @Component(
        selector: 'home'
      )
      @View(
        template: 'Hello {{name}}'
      )
      class HomeComp {
        String name;
        HomeComp() : name = 'Friend' {}
      }

  p.
    Next, create a component to display when the path is '/'.
    Create a <code>lib</code> directory
    (next to <code>web</code> and <code>pubspec.yaml</code>).
    Under it, create a <code>components</code> subdirectory
    and, under that, a <code>home</code> subdirectory.

  .callout.is-helpful
    header Note
    p.
      The <code>lib</code> directory is, by
      <a href="https://www.dartlang.org/tools/pub/package-layout.html">pub
      package layout conventions</a>,
      where reusable code goes.
      The <code>components</code> subdirectory is an Angular convention.
      [PENDING: check!]

  p If you load up the app, you should see <code>Hello Friend!</code>

.l-main-section
  h2#section-link-to-routes Link to routes

  p Let's add another route and then link to it. This route will have a route parameter, <code>id</code>.

  p In <code>main.dart</code>:

  pre.prettyprint.linenums.lang-dart
    code.
      @Component(
        selector: 'my-app'
      )
      @RouteConfig(const [
        const { 'path': '/',           'component': HomeComp },
        const { 'path': '/detail/:id', 'component': DetailComp }
      ])
      class AppComp {}


  p.
    We can link to our detail component using the <code>router-link</code> directive.
    Add this to <code>index.html</code>:

  pre.prettyprint.lang-html
    code.
      &lt;body ng-app=&quot;myApp&quot; ng-controller=&quot;AppController as app&quot;&gt;
        &lt;a router-link=&quot;detail({id: 5})&quot;&gt;link to detail&lt;/a&gt;
        ...

  p This directive will generate an <code>href</code> and update the browser URL.

  p We should also implement our detail component. Let's make these new files:

  pre.prettyprint.lang-bash
    code.
      mkdir components/detail
      touch components/detail/detail.html components/detail/detail.dart

  p In <code>detail.dart</code>, we implement a controller that uses the <code>id</code> route parameter:

  pre.prettyprint.linenums.lang-dart
    code.
      //TODO: imports
      @Component(
        selector: 'detail'
      )
      @View(
        template: 'User ID: {{id}}'
      )
      class DetailComp {
        number id;
        DetailComp(RouteParams routeParams) : id = routeParams.get('id') {}
      }

.l-main-section

  h2#section-configuring-the-router Configuring the Router

  p.
    Unlike other routing systems, Component Router maps URLs to components. A router takes an array of pairings like
    this:

  pre.prettyprint.linenums.lang-javascript(data-name="typescript")
    code.
      @Component(...)
      @View(...)
      @RouteConfig(const [
        const { 'path': '/user', 'component': 'user' }
      ])
      class MyComp {}




  .l-sub-section
    h3#section-sibling-outlets Sibling Outlets

    p You can configure multiple outlets on the same path like this:

    pre.prettyprint.linenums.lang-dart
      code.
        @Component(...)
        @View(
          template:
            `&lt;div router-outlet="master"&gt;&lt;/div&gt;
             &lt;div router-outlet="detail"&gt;&lt;/div&gt;`,
          directives: const [RouterOutlet]
        )
        @RouteConfig(const [ const {
          'path': '/user', 'components': const {
            'master': UserListComp,
            'detail': UserComp
          }
        }])
        class MyComponent {}



    p You can link to any sibling just as you normally would:

    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;p&gt;These both link to the same view:&lt;/p&gt;
        &lt;a router-link=&quot;userList&quot;&gt;link to userList&lt;/a&gt;
        &lt;a router-link=&quot;user&quot;&gt;link to user component&lt;/a&gt;


    p Or, you can explicitly link to a outlet-component pair like this:

    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;p&gt;These both link to the same view:&lt;/p&gt;
        &lt;a router-link=&quot;master:userList&quot;&gt;link to userList&lt;/a&gt;
        &lt;a router-link=&quot;detail:user&quot;&gt;link to user component&lt;/a&gt;

  .l-sub-section
    h3#section-redirecting-routes Redirecting routes

    p You can use `redirectTo` for migrating to a new URL scheme and setting up default routes.

    p.
      For example, as specified below, when a user navigates to `/`, the URL changes to `/user` and the outlet
      at that level loads the `user` component.

    pre.prettyprint.linenums.lang-dart
      code.
        @Component(...)
        @View(
          directives: const [RouterOutlet]
        )
        @RouteConfig(const [
          const { 'path': '/', 'redirectTo': '/user' },
          const { 'path': '/user', 'component': UserComp }
        ])
        class MyComp {}


  .l-sub-section
    h3#section-aliases Aliases

    p.
      When linking to a route, you normally use the name of the component. You can also specify an alias to use
      instead.

    p Consider the following route configuration:

    pre.prettyprint.linenums.lang-dart
      code.
        @Component(...)
        @View(
          directives: const [RouterOutlet]
        )
        @RouteConfig(const [
          const { 'path': '/', 'component': 'user' }
        ])
        class MyComp {}


    p We can link to the route in our template with the name of the component:

    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;a router-link=&quot;user&quot;&gt;link to user component&lt;/a&gt;

    p Or, we can define an alias <code>myUser</code> like this:

    pre.prettyprint.linenums.lang-dart
      code.
        @Component(...)
        @View(...)
        @RouteConfig(const [
          const { 'path': '/', 'component': UserComp, 'as': 'myUser' }
        ])
        class MyComp {}


    p And refer instead to the alias for the component in our template, with the same end-result:

    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;a router-link=&quot;myUser&quot;&gt;link to user component&lt;/a&gt;

    p.
      This is especially useful when you have sibling components, but want to refer to an entire level of routing in
      your controller. For example:

    pre.prettyprint.linenums.lang-dart
      code.
        @RouteConfig(const [
          const { 'path': '/', 'components':
              const { 'master': UserListComp, 'detail': UserComp },
          'as': 'myUser' }
        ])


  //- TODO(btford): expand on this.
  .l-sub-section
    h3#dynamic-configuration Dynamic Configuration

    p.
      You can configure dynamic routing by asking the DI system for a <code>Router</code>.
