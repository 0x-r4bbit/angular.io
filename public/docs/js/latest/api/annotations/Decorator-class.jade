
p.
  <span class="location-badge">exported from <a href="/angular2/annotations">angular2/annotations</a></span>
  defined in <a href="https://github.com/angular/angular/tree/master/modules/angular2/src/core/annotations/annotations.js#L755">angular2/src/core/annotations/annotations.js (line 755)</a>

:markdown
  Directive that attaches behavior to DOM elements.
  
  A decorator directive attaches behavior to a DOM element in a composable manner.
  (see: http://en.wikipedia.org/wiki/Composition_over_inheritance)
  
  Decorators:
  - are simplest form of <a href="angular2/annotations/Directive-class"><code>Directive</code></a>s.
  - are best used as a composition pattern ()
  
  Decorators differ from <a href="angular2/annotations/Component-class"><code>Component</code></a>s in that they:
  - can have multiple decorators per element
  - do not create their own evaluation context
  - do not have a template (and therefor do not create Shadow DOM)
  
  
  ## Example
  
  Here we use a decorator directive to simply define basic tool-tip behavior.
  
  ```
  @Decorator({
    selector: '[tooltip]',
    properties: {
      'text': 'tooltip'
    },
    hostListeners: {
      'onmouseenter': 'onMouseEnter()',
      'onmouseleave': 'onMouseLeave()'
    }
  })
  class Tooltip{
    text:string;
    overlay:Overlay; // NOT YET IMPLEMENTED
    overlayManager:OverlayManager; // NOT YET IMPLEMENTED
  
    constructor(overlayManager:OverlayManager) {
      this.overlay = overlay;
    }
  
    onMouseEnter() {
      // exact signature to be determined
      this.overlay = this.overlayManager.open(text, ...);
    }
  
    onMouseLeave() {
      this.overlay.close();
      this.overlay = null;
    }
  }
  ```
  In our HTML template, we can then add this behavior to a `<div>` or any other element with the `tooltip` selector,
  like so:
  
  ```
  <div tooltip="some text here"></div>
  ```
  
.l-main-section
  h2 Members
  .l-sub-section
    h3 constructor

    
    pre.prettyprint
      code.
        constructor({
          selector,
          properties,
          events,
          hostListeners,
          lifecycle,
          compileChildren = true,
        }:{
          selector:string,
          properties:any,
          events:List,
          hostListeners:any,
          lifecycle:List,
          compileChildren:boolean
        }={})
    
    :markdown
      




  .l-sub-section
    h3 compileChildren

    
    :markdown
      If set to true the compiler does not compile the children of this directive.




