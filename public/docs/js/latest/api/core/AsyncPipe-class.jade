
p.location-badge.
  exported from <a href='../core'>angular2/core</a>
  defined in <a href="https://github.com/angular/angular/tree/2.0.0-alpha.37/modules/angular2/src/core/pipes/async_pipe.ts#L35-L133">angular2/src/core/pipes/async_pipe.ts (line 35)</a>

:markdown
  The `async` pipe subscribes to an Observable or Promise and returns the latest value it has
  emitted.
  When a new value is emitted, the `async` pipe marks the component to be checked for changes.
  
  # Example
  The example below binds the `time` Observable to the view. Every 500ms, the `time` Observable
  updates the view with the current time.
  
  ```
  import {Observable} from 'angular2/core';
  @Component({
    selector: "task-cmp"
  })
  @View({
    template: "Time: {{ time | async }}"
  })
  class Task {
    time = new Observable<number>(observer => {
      setInterval(_ =>
        observer.next(new Date().getTime()), 500);
    });
  }
  ```
  
  

.l-main-section
  h2 Annotations
  .l-sub-section
    h3.annotation Pipe
    pre.prettyprint
      code.
        @Pipe({name: &#39;async&#39;, pure: false})


  .l-sub-section
    h3.annotation Injectable
    pre.prettyprint
      code.
        @Injectable()


.l-main-section
  h2 Members
  .l-sub-section
    h3#constructor constructor

    
    pre.prettyprint
      code.
        constructor(_ref: ChangeDetectorRef)
    
    :markdown




  .l-sub-section
    h3#onDestroy onDestroy

    
    pre.prettyprint
      code.
        onDestroy()
    
    :markdown





  .l-sub-section
    h3#transform transform

    
    pre.prettyprint
      code.
        transform(obj: Observable | Promise&lt;any&gt;, args?: any[])
    
    :markdown




