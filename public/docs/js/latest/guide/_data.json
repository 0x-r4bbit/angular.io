{
  "_listtype": "ordered",

  "index": {
    "title": "Step By Step Guide"
  },

  "setup": {
    "title": "Getting Started"
  },

  "displaying-data": {
    "title": "Displaying Data",
    "intro": "Displaying data is job number one for any good application. In Angular, you bind data to elements in HTML templates and Angular automatically updates the UI as data changes."
  },

  "user-input": {
    "title": "User Input",
    "intro": "DOM events drive user input in Angular. You can use the native events like click, mouseover, and keyup. Angular uses a special syntax to register events to DOM elements. This section covers all the ins and outs of using the event syntax."
  },

  "making-components": {
    "title": "Making Components",
    "intro": "Angular applications are a tree of nested components. You always begin with a top-level component. You add child components by including them in the parent's template."
  },

  "routing": {
    "title": "Routing",
    "intro": "Learn how to add the new Component Router to your application and set up and link routes."
  },

  "router-setup": {
    "title": "Setting up the Router",
    "intro": "Learn how to add the new Component Router to your application and set up and link routes."
  },

  "router-config": {
    "title": "Configuring the Router",
    "intro": "This section shows the many ways to configure routes in Component Router."
  },

  "router-lifecycle": {
    "title": "Router Lifecycle Hooks",
    "intro": "Component lifecycle hooks let you control each stage of a route navigation."
  }
}
