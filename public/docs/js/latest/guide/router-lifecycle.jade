.l-main-section
  h2#section-understanding-nav-lifecycle Understanding the Navigation Lifecycle

  p.
    There are four main lifecycle hooks: <code>canActivate</code>, <code>activate</code>, <code>canDeactivate</code>,
    and <code>deactivate</code>. A component can make use of these hooks by having its controller implement any number
    or combination of them.

  p.
    To understand how this works, let's step through a simple case where a component wants to navigate from one route
    to another.

.l-main-section
  h2#section-controller-constructor Setting Up the Controller

  p.
    Before a component can fire any lifecycle hooks, Angular needs to instantiate it. In this phase of routing, Angular
    injects the controller's dependencies.

  p.
    If the controller can't be instantiated, the constructor throws an exception and the router cancels navigation.
    However, you should avoid control flow logic by means of throwing exceptions. If you have logic that determines
    whether or not to perform a navigation, use the <code>canActivate hook</code> instead.

  p.
    Constructors should be lightweight. If you need to do a lot of work to setup a controller, consider using the
    <code>activate</code> lifecycle hook.

  .l-sub-section
    h3#section-cancel-with-canactivate Cancelling navigation with canActivate
    //TODO This seems like it belongs with the API doc for canActivate, rather than the dev guide?

    p.
      Before switching to a new component, this hook runs for each active component in the app. If any of them return
      <code>false</code>, a rejected promise, or a promise that resolves to <code>false</code>, the navigation is
      cancelled.

    p This hook is useful for authentication.

    h4 Example

    <!--[if Angular1]>
    .code-box
      pre.prettyprint.linenums.lang-javascript(data-name="es5")
        code.
          //ES5
          angular.module('app', [])
            .controller('MyController', ['user', '$http', MyController]);

          function MyController(user, $http) {
            this.user = user;
            this.$http = $http;
          }

          MyController.prototype.canActivate = function() {
            return this.user.isAdmin;
          };
    <![endif]-->
    <!--[if Angular2]>
    .code-box
      pre.prettyprint.linenums.lang-javascript(data-name="es5")
        code.
          //TODO Need Angular2 Example here for ES5 and TS
    <!--<![endif]-->

  .l-sub-section
    h3#section-activate activate
    //TODO This seems like it belongs with the API doc for activate, rather than the dev guide?

    p This hook fires just before the nagivation finishes.

    p This hook is useful for cases where you want your component to do some intensive work.

    h4 Example

    <!--[if Angular1]>
    .code-box
      pre.prettyprint.linenums.lang-javascript(data-name="es5")
        code.
          //ES5
          angular.module('app', [])
            .controller('MyController', ['user', '$http', MyController]);

            function MyController(user, $http) {
            this.user = user;
            this.$http = $http;
          }

          MyController.prototype.canActivate = function() {
            return this.user.isAdmin;
          };

          MyController.prototype.activate = function() {
            return this.bigFiles = this.$http.downloadBigFiles();
          };
    <![endif]-->
    <!--[if Angular2]>
    .code-box
      pre.prettyprint.linenums.lang-javascript(data-name="es5")
        code.
          //ES5
          //TODO: Need Angular 2 ES5 Example here
      pre.prettyprint.linenums.lang-typescript(data-name="typescript")
        code.
         //TODO: Need Angular 2 TS Example here
    <!--<![endif]-->

  .l-sub-section
    h3#section-can-deactivate canDeactivate
    //TODO This seems like it belongs with the API doc for canDeactivate, rather than the dev guide?

    p.
      This hook fires for each component that is removed as part of navigation. <code>canDeactivate</code> fires before
      any new components are instantiated. If any of them return <code>false</code>, a rejected promise, or a promise
      that resolves to <code>false</code>, the navigation is cancelled.

    p <code>canDeactivate</code> is useful for making sure that data is properly persisted before navigating away.


    h4 Example

    p In this example, we show a dialog asking a user whether or not to save their work before continuing.

    <!--[if Angular1]>
    .code-box
      pre.prettyprint.linenums.lang-javascript(data-name="es5")
        code.
          //ES5
          angular.module('app.save', [])
            .controller('SaveController', ['$q', SaveController]);

            function SaveController($q) {
            this.$q = $q;
          }

          /*
           * return a promise that is resolved based on the user's
           * choice in a dialog box
           */
          SaveController.prototype.canDeactivate = function() {
            this.deferred = this.$q.defer();
            this.showSaveDialog = true;
            return this.deferred.promise();
          };
      pre.prettyprint.linenums.lang-html(data-name="html")
        code.
          &lt;div&gt;
            &lt;div ng-show=&quot;showSaveDialog&quot;&gt;
              &lt;p&gt;Would you like to save your work?&lt;/p&gt;
              &lt;button ng-click=&quot;save.deferred.resolve()&quot;&gt;Save&lt;/button&gt;
              &lt;button ng-click=&quot;save.deferred.reject()&quot;&gt;Discard&lt;/button&gt;
            &lt;/div&gt;
          &lt;/div&gt;

    <![endif]-->
    <!--[if Angular2]>
    .code-box
      pre.prettyprint.linenums.lang-javascript(data-name="es5")
        code.
          //ES5
          //TODO: Need Angular 2 ES5 Example here
      pre.prettyprint.linenums.lang-typescript(data-name="typescript")
        code.
          //TODO: Need Angular 2 TS Example here
    <!--<![endif]-->

  .l-sub-section
    h3#section-deactivate deactivate
    //TODO This seems like it belongs with the API doc for deactivate, rather than the dev guide?

    p.
      This hook fires for each component that is removed as part of navigation. <code>deactivate</code> is useful for
      doing cleanup work.

    p.
      This hook fires after the <code>canActivate</code> of the new component and <code>canDeactivate</code> of the
      component to be removed, but before <code>activate</code> of the new component.

    h4 Example

    p In this example, we have a component that prevents navigation until a user saves.

    <!--[if Angular1]>
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        angular.module('app.my', [])
          .controller('MyController', ['user', '$http', MyController]);

        function MyController(user, $http) {
          this.user = user;
          this.$http = $http;
          this.userDataPersisted = true;
        }

        MyController.prototype.updateUserName = function(newName) {
          var self = this;
          this.userDataPersisted = false;
          return this.user.setName(newName).then(function () {
            self.userDataPersisted = true;
          });
        };

        MyController.prototype.canActivate = function() {
          return this.user.isAdmin;
        };

        MyController.prototype.activate = function() {
          this.user.downloadBigFiles();
        };

        MyController.prototype.canDeactivate = function() {
          return this.userDataPersisted;
        };
    <![endif]-->
    <!--[if Angular2]>
    .code-box
      pre.prettyprint.linenums.lang-javascript(data-name="es5")
        code.
          //ES5
          //TODO: Need Angular 2 ES5 Example here
      pre.prettyprint.linenums.lang-typescript(data-name="typescript")
        code.
           //TODO: Need Angular 2 TS Example here
    <!--<![endif]-->

.l-main-section
  h2#dynamic-navigation-overview Navigation Overview

  p This is the basic logic that the router uses when determining whether or not to perform a navigation.

  <!--[if Angular1]>
  pre.prettyprint.linenums.lang-javascript(data-name="es5")
    code.
      digraph G {
        node [shape=box, width=3, fontsize="12px", style=filled, peripheries=0];
        splines=ortho;
        nodesep=0.50;

        {
          node[fontname="Helvetica", fillcolor=grey90];
          "complete navigation";
          "cancel navigation";
          "begin navigation";
        }

        {
          node [fontname="Courier"];
          "oldCtrl.canReuse()" [fillcolor=lightgrey];
          "oldCtrl.reuse()" [fillcolor=lightgrey];
          "oldCtrl.canDeactivate()" [fillcolor=lightblue];
          "newCtrl = new Ctrl()" [fillcolor=lightsalmon];
          "newCtrl.canActivate()" [fillcolor=lightsalmon];
          "oldCtrl.deactivate()" [fillcolor=lightblue];
          "newCtrl.activate()" [fillcolor=lightsalmon];
        }

        "begin navigation"         -> "oldCtrl.canReuse()";
        "oldCtrl.canReuse()"       -> "oldCtrl.reuse()"          [label=true];
        "oldCtrl.canReuse()"       -> "oldCtrl.canDeactivate()";
        "oldCtrl.canDeactivate()"  -> "newCtrl = new Ctrl()"     [label="true", weight=10, fontcolor=darkgreen];
        "oldCtrl.canDeactivate()"  -> "cancel navigation"        [fontcolor=red];

        "newCtrl = new Ctrl()"     -> "newCtrl.canActivate()"    [label="ok", weight=10, fontcolor=darkgreen];
        "newCtrl = new Ctrl()"     -> "cancel navigation"        [fontcolor=red];

        "newCtrl.canActivate()"    -> "oldCtrl.deactivate()"     [label="true", weight=10, fontcolor=darkgreen];
        "newCtrl.canActivate()"    -> "cancel navigation"        [fontcolor=red];

        "oldCtrl.deactivate()"     -> "newCtrl.activate()"       [label="ok", weight=10, fontcolor=darkgreen];
        "oldCtrl.deactivate()"     -> "cancel navigation";

        "newCtrl.activate()"       -> "complete navigation"      [weight=10];
        "newCtrl.activate()"       -> "cancel navigation";

        { rank=same; "complete navigation"; "cancel navigation"; "oldCtrl.reuse()" }
      }
  <![endif]-->
  <!--[if Angular2]>
  .code-box
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        //ES5
        //TODO: Need Angular 2 ES5 Example here
    pre.prettyprint.linenums.lang-typescript(data-name="typescript")
      code.
        //TODO: Need Angular 2 TS Example here
  <!--<![endif]-->