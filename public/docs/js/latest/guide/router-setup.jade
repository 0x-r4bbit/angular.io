.l-main-section

  h2#section-route-use Using the Component Router
  p There are three steps to setting up routing with Angular's Component Router
  ol
    li Install the Component Router
    li Map paths to components
    li Link to routes


.l-main-section

  h2#section-install-router Install the Component Router

  p.
    Because the component is an addition to the core, you must first install Angular's Component Router into your app.
    For example, using <code>npm</code>, like this:

  pre.prettyprint.lang-bash
    code.
      npm install angular-new-router

  p Your app directory might look something like:

  pre.prettyprint.lang-bash
    code.
      app.js
      index.html
      package.json
      node_modules/
      └── ...

  p.
    You must explicitly add the router into your app with a script tag
    <code>&lt;script src=&quot;/dist/router.es5.js&quot;&gt;&lt;/script&gt;</code>.

  p Your <code>index.html</code> file might look something like this:

  <!--[if Angular1]>
  pre.prettyprint.lang-html
    code.
      &lt;!doctype html&gt;
      &lt;html lang=&quot;en&quot;&gt;
      &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;base href=&quot;/&quot;&gt;
        &lt;title&gt;My app&lt;/title&gt;
      &lt;/head&gt;
      &lt;body ng-app=&quot;myApp&quot; ng-controller=&quot;AppController as app&quot;&gt;
        &lt;div ng-outlet&gt;&lt;/div&gt;
              &lt;script src=&quot;/node_modules/angular/angular.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;/dist/router.es5.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;/app/app.js&quot;&gt;&lt;/script&gt;
      &lt;/body&gt;
      &lt;/html&gt;
  <![endif]-->
  <!--[if Angular2]>
  .code-box
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        //TODO Need Angular2 Example here for ES5
    pre.prettyprint.linenums.lang-typescript(data-name="typescript")
      code.
        //TODO Need Angular2 Example here for TypeScript

  <!--<![endif]-->

  p.
    This is a pretty typical angular app, except the <code>ng-outlet</code> directive. <code>ng-outlet</code> is like
    <code>ng-view</code>; it's a placeholder for part of your app loaded dynamically based on the route configuration.


  p So how do we configure the app? Let's open <code>app.js</code> and find out. Add this to the file:

  <!--[if Angular1]>
  pre.prettyprint.lang-javascript
    code.
      angular.module('app', ['ngNewRouter'])
        .controller('AppController', ['$router', AppController]);
          AppController.$routeConfig([
        {path: '/', component: 'home' }
      ]);
      function AppController ($router) {}
  <![endif]-->
  <!--[if Angular2]>
  .code-box
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        //TODO Need Angular2 Example here for ES5
    pre.prettyprint.linenums.lang-typescript(data-name="typescript")
      code.
        //TODO Need Angular2 Example here for TypeScript
  <!--<![endif]-->

  p.
    The <code>ngNewRouter</code> module provides a new service, <code>$router</code>. In the configuration, we map paths
    to components. What's a component? Let's talk about that for a bit.

.l-main-section
  h2#section-map-paths-to-components Map paths to components

  p.angular1.
    In Angular 1, a "routable component" is a template, plus a controller, plus a router. You can configure how to map
    component names to controllers and templates in the <code>$componentLoader</code> service.
   <!-- TODO - Alex - would it make more sense to have some paragraph styles conditionalized like this?? -->

  p.
    A component's template can have "outlets," which are holes in the DOM for loading parts of your app based on the
    route configuration and its controller can have a router. A component's router tells the component what to put
    inside the outlets based on URL. The configuration maps routes to components for each outlet.

  p Let's make a <code>home</code> component that our app can route to:

  pre.prettyprint.lang-bash
    code.
      mkdir -p components/home
      touch components/home/home.html components/home/home.js

  p This creates our component directory and its corresponding files: a template and a JavaScript component.

  p Let's open <code>home.html</code> and add some content:

  pre.prettyprint.lang-html
    code.
      &lt;h1&gt;Hello {{home.name}}!&lt;/h1&gt;

  p.
    Components use the "controller as" syntax, so if we want to access property <code>name</code> of the controller, we
    write the binding as <code>home.name</code>.

  p Let's make a controller:
  <!--[if Angular1]>
  pre.prettyprint.lang-javascript
    code.
      angular.module('app.home', [])
        .controller('HomeController', [function () {
          this.name = 'Friend';
        }]);
  <![endif]-->
  <!--[if Angular2]>
  .code-box
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        //TODO Need Angular2 Example here for ES5
    pre.prettyprint.linenums.lang-typescript(data-name="typescript")
      code.
        //TODO Need Angular2 Example here for TypeScript
  <!--<![endif]-->

  p To wire this up, We need to add a <code>&lt;script&gt;</code> tag to our <code>index.html</code>:
    pre.prettyprint.lang-html
      code.
        ...
        &lt;script src=&quot;./components/home/home.js&quot;&gt;&lt;/script&gt;

  p And add the controller's module as a dependency to our main module in <code>app.js</code>:
  <!--[if Angular1]>
  pre.prettyprint.lang-javascript
    code.
      angular.module('app', ['ngNewRouter', 'app.home'])
        .controller('AppController', ['$router', AppController]);
      // ...
  <![endif]-->
  <!--[if Angular2]>
  .code-box
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        //TODO Need Angular2 Example here for ES5
    pre.prettyprint.linenums.lang-typescript(data-name="typescript")
      code.
        //TODO Need Angular2 Example here for TypeScript
  <!--<![endif]-->

  p If you load up the app, you should see <code>Hello Friend!</code>

.l-main-section
  h2#section-link-to-routes Link to routes

  p Let's add another route and then link to it. This route will have a route parameter, <code>id</code>.

  p In <code>app.js</code>:
  <!--[if Angular1]>
  pre.prettyprint.lang-javascript
    code.
      angular.module('app', ['ngNewRouter'])
        .controller('AppController', ['$router', AppController]);
            AppController.$routeConfig = [
        { path: '/',           component: 'home' },
        { path: '/detail/:id', component: 'detail' }
      ];
      function AppController ($router) {}
  <![endif]-->
  <!--[if Angular2]>
  .code-box
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        //TODO Need Angular2 Example here for ES5
    pre.prettyprint.linenums.lang-typescript(data-name="typescript")
      code.
        //TODO Need Angular2 Example here for TypeScript
  <!--<![endif]-->

  p We can link to our detail component using the <code>ng-link</code> directive. Add this to <code>index.html</code>:

  pre.prettyprint.lang-html
    code.
      &lt;body ng-app=&quot;myApp&quot; ng-controller=&quot;AppController as app&quot;&gt;
        &lt;a ng-link=&quot;detail({id: 5})&quot;&gt;link to detail&lt;/a&gt;
        ...

  p This directive will generate an <code>href</code> and update the browser URL.

  p We should also implement our detail component. Let's make these new files:

  pre.prettyprint.lang-bash
    code.
      mkdir components/detail
      touch components/detail/detail.html components/detail/detail.js

  p In <code>detail.js</code>, we implement a controller that uses the <code>id</code> route parameter:

  <!--[if Angular1]>
  pre.prettyprint.lang-javascript
    code.
      angular.module('app.detail', ['ngNewRouter'])
        .controller('DetailController', ['$routeParams', DetailController]);
            function DetailController ($routeParams) {
        this.id = $routeParams.id;
      }
  <![endif]-->
  <!--[if Angular2]>
  .code-box
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        //TODO Need Angular2 Example here for ES5
    pre.prettyprint.linenums.lang-typescript(data-name="typescript")
      code.
        //TODO Need Angular2 Example here for TypeScript
  <!--<![endif]-->

  p And then we can display the <code>id</code> in our template by adding this to <code>detail.html</code>:

  pre.prettyprint.lang-html
    code.
      &lt;p&gt;detail {{detail.id}}&lt;/p&gt;

  p.
    Finally, we'd wire up the controller by adding a script tag and making our <code>app</code> module depend on
    <code>app.detail</code>.

